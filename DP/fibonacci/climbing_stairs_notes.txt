Climbing Stairs
---------------
Count ways to reach the nth stair. The person can climb either 1 stair or 2 stairs at a time. 

Top-down approach
-----------------

int countWays(int n, int ways[]) {
    if(n == 0)
        return 1;
    if(n < 1)
        return 0;
    if(ways[n] != -1)
        return ways[n];
    
    ways[n] = countWays(n-1, ways) + countWays(n-2, ways);
    return ways[n];
}

int ways = int ways[n+1];
Arrays.fill(ways, -1);
countWays(n, ways);


Bottom-up approach
------------------

int countWays(int n) {
    int ways = int ways[n+1];
    Arrays.fill(ways, -1);

    ways[0] = 1;

    for(int i=1;i<n+1;i++) {
        if(n == 1)
            ways[i] = ways[i-1] + 0;
        else
            ways[i] = ways[i-1] + ways[i-2];
    }
}


Count ways to reach the nth stair, if the person can climb either 1 stair or 2 stairs or 3 stairs at a time.
    ways[n] = ways[n-1] + ways[n-2] + ways[n-3]

Count ways to reach the nth stair, if the person can climb either 1 stair or 2 stairs or 3 stairs or 4 stairs at a time.
    ways[n] = ways[n-1] + ways[n-2] + ways[n-3] + ways[n-4]




