Recursive method
----------------

int fib(int n) {
    if( n==0 || n==1 )
        return n;
    else {
        return fib(n-1) + fib(n-2);
    }
}


Top-down approach
-----------------

int fib(int n, int arr[]) {
    if( n==0 || n==1 )
        return arr[n] = n;
    else {
        if(arr[n] != 0)
            return arr[n];

        return arr[n] = fib(n-1, arr) + fib(n-2, arr);
    }
}

int arr[] = new arr[n+1];
fib(n,arr);


Bottom-up approach
------------------

int fib(int n) {
    int arr[] = new arr[n+1];

    arr[0] = 0;
    arr[1] = 1;

    for(int i=2;i<n+1;i++)
        arr[i] = arr[i-1] + arr[i-2];
    
    return arr[n];
}


Efficient Solution
------------------

int fib(int n) {
    int first = 0, second = 1, sum = 0;

    if(n == 0 || n == 1)
        return n;
    
    for(int i=2;i<n+1;i++) {
        sum = first + second ;
        first = second;
        second = sum;
    }
    return sum;
}



